#!/system/bin/sh

export PATH=/system/bin
busybox="/system/xbin/busybox"
deb_dir="var/cache/apt/archives"

usage() {
	echo "Usage:"
	echo "* $0 bootstrap"
	echo " --- Set up and mount a base Termux rootfs with the apt package manager at persist.termux.rootdir"
	echo " --- If persist.termux.diskimage and persist.termux.diskimage.size are set, will instead mount the Termux rootfs inside a loopback device."
	echo " --- Useful if bootstrapping onto an SD card (no exec permissions)."
	echo " --- If successful, will set persist.termux.enabled is \"true\""
	echo "* $0 delete"
	echo " --- Deletes the Termux rootdir or disk image, depending on which format is used."
	echo " --- If successful, sets persist.termux.enabled to \"false\""
	echo "* $0 diskimage-mount"
	echo " --- Only needs to be called if persist.termux.diskimage is set. Mount point is at persist.termux.rootdir."
	echo "* $0 diskimage-unmount"
	echo " --- Only needs to be called if persist.termux.diskimage is set."
	echo "* $0 mount"
	echo " --- Mounts an existing Termux rootdir/disk image to the top-level initramfs."
	echo " --- Creates symlinks to /bin, /home, /var, /run, /srv, which do not exist in the Android filesystem hierarchy."
	echo " --- The /etc is treated differently, because there already exists a symlink to the read-only /system/etc location."
	echo " --- Both the Android and the Termux /etc folders are kept and merged using overlayfs."
	echo " --- Any file in the Termux /etc will override in terms of visibility (but not replace) the /system/etc file of the same name."
	echo " --- As for /usr, although that location does not exist in Android, there is a /system/usr which contains mostly tzdata."
	echo " --- Normally, Android applications get access to tzdata by using \$ANDROID_ROOT=/system."
	echo " --- By using the same overlayfs technique for /usr and /system/usr, we can change \$ANDROID_ROOT to /."
	echo "* $0 unmount"
	echo " --- Unmounts an existing Termux rootdir/disk image from the top-level initramfs."
	echo "* $0 resize"
	echo " --- Resizes an existing Termux disk image to persist.termux.diskimage.size"
	echo " --- The size can be specified in whatever format is accepted by the \"truncate\" program"
	echo " --- WARNING: Not guaranteed to keep your data integrity if you want to shrink the disk image!"
	echo " --- Not applicable if disk image format is not used."
	echo ""
	echo "Persistent properties that are taken as input by this script:"
	echo "* persist.termux.rootdir"
	echo "* persist.termux.diskimage"
	echo "* persist.termux.diskimage.size"
	echo ""
	echo "Properties that are set and used internally by the script, and that are persistent across reboots:"
	echo "* persist.termux.enabled"
	echo ""
	echo "Properties that are set and used internally by the script, and that are not persistent:"
	echo "* sys.termux.diskimage.mounted"
	echo "* sys.termux.ram.mounted"
}

die() {
	rc="$1"
	[ "$rc" -ne 0 ] && { echo "$0: Failed, exiting."; exit "$rc"; }
}

create_dir_if_not_exists() {
	dir="$1"
	if ! [ -d "$dir" ]; then
		echo "$0: Creating new directory $dir..."
		mkdir -p "$dir"; die "$?"
	fi
}

set_permissions() {
	dir="$1"
	uid="$2"
	gid="$3"
	echo "Setting owner $uid for dir $dir..."
	chown -R "$uid" "$dir"; die "$?"
	echo "Setting group $gid for dir $dir..."
	chgrp -R "$gid" "$dir"; die "$?"
	echo "Setting permissions for dir $dir..."
	find "$dir" -type d | "$busybox" xargs -r chmod 0755; die "$?"
	find "$dir" -type f | "$busybox" xargs -r chmod 0644; die "$?"
	find "$dir" -type f | "$busybox" xargs -r file | grep -E "ELF|script" | \
		cut -f 1 -d : | "$busybox" xargs -r chmod 0755
	die "$?"
}

# Utility function to download a resource, optionally checking against a checksum.
# Shamelessly kang'ed from termux-packages
termux_download() {
	local URL="$1"
	local DESTINATION="$2"

	if [ -f "$DESTINATION" ] && [ $# = 3 ] && [ -n "$3" ]; then
		# Keep existing file if checksum matches.
		local EXISTING_CHECKSUM
		EXISTING_CHECKSUM=$(sha256sum "$DESTINATION" | cut -f 1 -d ' ')
		if [ "$EXISTING_CHECKSUM" = "$3" ]; then return; fi
	fi

	local TMPFILE
	TMPFILE=$(mktemp "XXXXXXXXX")
	echo "Downloading ${URL}"
	local TRYMAX=6
	for try in $(seq 1 $TRYMAX); do
		if curl -L --fail --retry 2 -o "$TMPFILE" "$URL"; then
			local ACTUAL_CHECKSUM
			ACTUAL_CHECKSUM=$(sha256sum "$TMPFILE" | cut -f 1 -d ' ')
			if [ $# = 3 ] && [ -n "$3" ]; then
				# Optional checksum argument:
				local EXPECTED=$3
				if [ "$EXPECTED" != "$ACTUAL_CHECKSUM" ]; then
					>&2 printf "Wrong checksum for %s:\nExpected: %s\nActual:   %s\n" \
					           "$URL" "$EXPECTED" "$ACTUAL_CHECKSUM"
					exit 1
				fi
			else
				printf "No validation of checksum for %s:\nActual: %s\n" \
				       "$URL" "$ACTUAL_CHECKSUM"
			fi
			mv "$TMPFILE" "$DESTINATION"
			return
		else
			echo "Download of $URL failed (attempt $try/$TRYMAX)" 1>&2
			sleep 45
		fi
	done

	termux_error_exit "Failed to download $URL"
}

mount_fail_cleanly() {
	"$busybox" umount "/usr"
	"$busybox" umount "/tmp"
	"$busybox" umount "/etc"
	rmdir "/usr"
	rmdir "/tmp"
	rm -f "/home"
	rm -f "/srv"
	rm -f "/var"
	rm -f "/run"
	rm -f "/bin"
	# Do not remove /etc, Android needs it!
	"$busybox" mount -o remount,ro /
	exit 1
}

diskimage_bootstrap() {
	if [ -f "$diskimage" ]; then
		echo "$0: Using disk image $diskimage..."
		return
	fi
	size=$(getprop persist.termux.diskimage.size)
	if [ -z "$size" ]; then
		echo "$0: persist.termux.diskimage.size not set. Exiting."
		exit 1
	fi
	echo "$0: Disk image does not exist. Creating new empty one..."
	truncate -s "$size" "$diskimage"; die "$?"
	echo "$0: Formatting disk image"
	mke2fs -F "$diskimage"; die "$?"
}

main_bootstrap() {
	# Rootdir will always be needed, regardless of whether this is diskimage or not.
	# If it is, create the other dirs only once it is mounted.
	create_dir_if_not_exists "$rootdir"
	if [ -n "$diskimage" ]; then
		echo "$0: Bootstrapping to disk image $diskimage..."
		diskimage_bootstrap
		diskimage_mount
	fi
	echo "$0: Creating rootdir skeleton..."
	create_dir_if_not_exists "$rootdir/etc"
	create_dir_if_not_exists "$rootdir/home"
	create_dir_if_not_exists "$rootdir/usr/bin"
	create_dir_if_not_exists "$rootdir/usr/lib"
	create_dir_if_not_exists "$rootdir/srv"
	create_dir_if_not_exists "$rootdir/var/run"
	create_dir_if_not_exists "$rootdir/var/lib/dpkg/info"
	create_dir_if_not_exists "$rootdir/var/lib/dpkg/updates"
	create_dir_if_not_exists "$rootdir/var/log/apt/"
	create_dir_if_not_exists "$rootdir/var/cache/apt/archives/partial"

	touch "$rootdir/var/lib/dpkg/status"
	if ! [ -f "$rootdir/etc/resolv.conf" ]; then
		echo "nameserver 8.8.8.8" > "$rootdir/etc/resolv.conf"
	fi

	echo "$0: Downloading packages for apt..."
	create_dir_if_not_exists "$rootdir/$deb_dir"
	deb_list=""
	for pair in \
		"libc++_15.2_aarch64.deb           81a0ab7626baf04a73ac17c22029d4f8ea8812da9bc61b4bf2dc9f8720e2fce1" \
		"libandroid-support_22_aarch64.deb da568a41843d5c148df397a1f5970c56e05b91d1430354d4e6e950c226270041" \
		"busybox_1.27.1-2_aarch64.deb      c01da3374157ce304dc251743a1cf9e10ee48d2c94e32157cc5bee1c37f0e5aa" \
		"liblzma_5.2.3_aarch64.deb         6a55327af63e2ebd6f435c1c7798b5294f2e5ed6923866dc2321d81d1f0a70e1" \
		"ncurses_6.0.20170827_aarch64.deb  3d64e0b0128b659fb79e783862cd6922bcf1f22a69d714798c6cefd3ff201b43" \
		"readline_7.0.3_aarch64.deb        68262436b84f51db6275faa9a51d6062fe597071ae075d81120cc499e9a0d4df" \
		"bash_4.4.12_aarch64.deb           32fd8fa9c34d2b741e6458c53593aeecaefd2f643aab71948471aba32cdc7f72" \
		"gpgv_1.4.22_aarch64.deb           b746f4bc8bd8c8bc1a6e761c600575618dd16aa2ef877af05d3948a30f571bc7" \
		"gnupg_1.4.22_aarch64.deb          ffdd15c1d1d22dde30ac205db52737ac2c665cc29b41267c28fdbbae541d2a31" \
		"dpkg_1.18.24_aarch64.deb          72f5e5fcb587c8720df292ddc639411c33a238ecf085b6ec25b0c68fddca4ef0" \
		"apt_1.2.12-3_aarch64.deb          cca62e4ecb4e2e255d2f080d1d80e00fd5838ea504445d889ce402197e2919a5"
	do
		deb=$(echo "$pair" | "$busybox" awk '{ print $1; }')
		checksum=$(echo "$pair" | "$busybox" awk '{ print $2; }')
		echo "$0: Downloading $deb, checksum $checksum..."
		termux_download \
			"http://apt.lineageosplus.org/dists/bootstrap/main/binary-$(uname -m)/$deb" \
			"$rootdir/$deb_dir/$deb" \
			"$checksum"
		deb_list+=" $rootdir/$deb_dir/$deb"
	done

	ln -s "$rootdir/usr/bin/bash" "$rootdir/usr/bin/sh"

	initramfs_mount	

	export LD_LIBRARY_PATH=/usr/lib
	export ANDROID_ROOT=/

	echo "$0: Installing required deb packages for apt..."
	for deb in $deb_list; do
		echo "$0: Installing $deb..."
		"$busybox" dpkg -i "$deb"
	done

	set_permissions "$rootdir" root root


	cat << EOF > "$rootdir/etc/apt/sources.list"
# The main termux repository:
deb [arch=all,$(uname -m)] http://apt.lineageosplus.org stable main
EOF

	cat << 'EOF' > /var/cache/apt/apt-gpg.key
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQENBFmrBFgBCADSz/BgFp5/IvtvM/TItoJfKF/tVwQWbbcH1mtowwBRDsDMWc11
aqIGujNG04x5VVy9CI9uf8LidGkLnEkQp2X5Nok4G5IKMUIVrVQekDDOnsPEt3RK
2ejdQW0l4CzhrM+yyTvNDU7wBZeoke2F69IEsUnz8vGVbOHNU3pI01NG+eGYysBE
EQQuh1I40pUIy5OZZE8kguxzoxn/H/KRuI7XiOK/FQSjxZm6z9NvDPogkcBNrYBo
U5qfpep7T0IE38cYSFN1zyRfAHlnLMKt0pgiJfkCCS2oTM+TZipNPbh5um6+OQnl
0yNR+b7yUSeHeyKcgVWIAmyJ45lAAUx65J8zABEBAAG0JklvYW5hIENpb3JuZWkg
PGNpb3JuZWlpb2FuYUBnbWFpbC5jb20+iQE4BBMBAgAiBQJZqwRYAhsDBgsJCAcD
AgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDWLj442126VlZ+B/0YCnXTV/Zxfutz6xnF
XlG2OZg5vUF7+gPyKo45YgA7aZ0fL9Z3wQqLDSaCnv0of6TlY0GHVWhqa/JEfyYO
QZWqLWoWsYXLr1/ClY1DeTmYTR+TutAJcXuKYSA2bgN13AdKGHyrWvxmEhpUDAC9
/rkxm+yc44S0Wgyw/d5sIsLtYWkr5PrWsDCSPHxjmxtpXLrloj1SrfR74l4s0paq
DpsXkU8usCzoy2+c2AhUARD4VRqgcylri93pvQz1Q/TbP/FzHQDvCcoV5nlFRhLT
BT2AIKQyZuUWx4WNbPrTxOug3zBpcOFWquLoWX3gPQXGWGqOfUGW48iFBt6WqoRs
eeP/uQENBFmrBFgBCADL9FvG/8BBjIM6/UBkVLZqlgVEU5oQvzTqLWwyOm5L8tZV
k4OGGozyBVImWECWG7uXCvxS1Er6EuZcrlHVX9nfnRTfDfx+27cz+b9EdnCFFILi
+geYGebmt6aLMsn/SzwGZnJcmjXXj3mqmeBsm86IuuJx0/9OshJVsRcWf3b376ce
TXzaLprMveiv2XkIKbA0C4DQ68te19WM70xYQFs/Sm9KpT5vG7rrtqncbBaU80Nu
sskmOy8SBSy/ta6PHmcQ5UkUey47URqRc8nacQzkoU36j5mimgcV8arz+wHCnfsJ
puhPpsrc0UZYZ8hEpykMutYvjLfyjc7mZh4NIX6hABEBAAGJAR8EGAECAAkFAlmr
BFgCGwwACgkQ1i4+ONtdulZc1wf8Dd0UMS6vTHJD0iKToj17RIwvc78ZWL8IQZJX
uxD2g8q2LWaQzjLaVmlcAqnYOCR6/6bStKvdIbFOZw0qa1VQAJJJrYlRduej56DI
r/tYMSFpUliEde+ujTDkKik72z/OebPqrx+s2Jc2hVI+ww/Kuf4I9CQH6/icduNk
B9w8F7G97CD1rB9HB/tc+H0wu+G1DeShxaDcSTkXqJPCYXP/+1JFMY8v38VJSNtm
3kYgel2ev7ZTOOtxX03KB9qBFrqRQY51bDSbukm/8bixIUEN+3gy6zSy8VgKXnTN
+AcgZKJ6wSN2Eem2FFKRUnkjVmC/nN6kieXGp+bL5vTcUjG8cQ==
=96Ql
-----END PGP PUBLIC KEY BLOCK-----
EOF

	PATH=/usr/bin:/system/bin HOME=/home apt-key add /var/cache/apt/apt-gpg.key

	PATH=/usr/bin:/system/bin HOME=/home apt update

	echo "$0: Bootstrap successful."
	setprop persist.termux.enabled true
}

initramfs_mount() {
	if [ -n "$diskimage" ]; then
		check_diskimage_mounted true
	fi
	check_termux_mounted false
	echo "$0: Mounting termux..."

	echo "$0: Checking for kernel support of overlayfs..."
	if ! grep -q "overlayfs" "/proc/filesystems"; then
		echo "Overlayfs not supported, exiting."
		exit 1
	fi

	echo "$0: Remounting initramfs read/write..."
	"$busybox" mount -o remount,rw /
	[ $? -ne 0 ] && { echo "$0: Failed, exiting."; exit 1; }
	create_dir_if_not_exists "/usr"
	create_dir_if_not_exists "/tmp"
	"$busybox" mount -t tmpfs none "/tmp"; [ $? -ne 0 ] && mount_fail_cleanly
	"$busybox" mount -t overlayfs -o lowerdir="/system/usr",upperdir="$rootdir/usr" \
		overlayfs "/usr"; [ $? -ne 0 ] && mount_fail_cleanly
	"$busybox" mount -t overlayfs -o lowerdir="/system/etc",upperdir="$rootdir/etc" \
		overlayfs "/etc"; [ $? -ne 0 ] && mount_fail_cleanly
	ln -sf "$rootdir/home"    "/home"; [ $? -ne 0 ] && mount_fail_cleanly
	ln -sf "$rootdir/srv"     "/srv";  [ $? -ne 0 ] && mount_fail_cleanly
	ln -sf "$rootdir/var"     "/var";  [ $? -ne 0 ] && mount_fail_cleanly
	ln -sf "$rootdir/var/run" "/run";  [ $? -ne 0 ] && mount_fail_cleanly
	ln -sf "$rootdir/usr/bin" "/bin";  [ $? -ne 0 ] && mount_fail_cleanly
	echo "Mounting initramfs back read-only..."
	"$busybox" mount -o remount,ro /
	echo "$0: Termux mounted successfully."
	setprop sys.termux.ram.mounted true
}

initramfs_unmount() {
	check_termux_mounted true
	echo "$0: Unmounting termux..."
	"$busybox" mount -o remount,rw /
	"$busybox" umount "/etc"
	"$busybox" umount "/usr"
	"$busybox" umount "/tmp"
	rmdir "/usr"
	rmdir "/tmp"
	rm -f "/home"
	rm -f "/srv"
	rm -f "/var"
	rm -f "/run"
	rm -f "/bin"
	# Do not remove /etc, Android needs it!
	"$busybox" mount -o remount,ro /
	setprop sys.termux.ram.mounted false
	echo "$0: Termux unmounted successfully..."
}

diskimage_mount() {
	if [ -z "$diskimage" ]; then
		echo "$0: Disk image not specified. Assuming rootdir points at actual termux folder. Do nothing."
		return
	fi
	check_termux_mounted false
	check_diskimage_mounted false
	echo "$0: Checking filesystem integrity..."
	e2fsck -y -f "$diskimage"
	echo "$0: Mounting $diskimage loop device at $rootdir..."
	"$busybox" mount "$diskimage" "$rootdir"
	die $?

	setprop sys.termux.diskimage.mounted true
}

diskimage_unmount() {
	if [ -z "$diskimage" ]; then
		echo "$0: Disk image not specified. Assuming rootdir points at actual termux folder. Do nothing."
		return
	fi
	check_termux_mounted false
	check_diskimage_mounted true
	"$busybox" umount "$rootdir"
	echo "$0: Checking filesystem integrity..."
	e2fsck -y -f "$diskimage"
	setprop sys.termux.diskimage.mounted false
}

check_termux_mounted() {
	bool="$1"
	case "$bool" in
	true)
		if ! [ "$(getprop sys.termux.ram.mounted)" = "true" ]; then
			echo "$0: Disk image not mounted. Exiting"
			exit 1
		fi
		;;
	false)
		if [ "$(getprop sys.termux.ram.mounted)" = "true" ]; then
			echo "$0: Termux already mounted. Exiting"
			exit 1
		fi
		;;
	*)
		echo "check_termux_mounted: invalid parameter $bool. expected true|false"
		;;
	esac
}

check_diskimage_mounted() {
	bool="$1"
	case "$bool" in
	true)
		if ! [ "$(getprop sys.termux.diskimage.mounted)" = "true" ]; then
			echo "$0: Disk image not mounted. Exiting"
			exit 1
		fi
		;;
	false)
		if [ "$(getprop sys.termux.diskimage.mounted)" = "true" ]; then
			echo "$0: Disk image already mounted. Exiting"
			exit 1
		fi
		;;
	*)
		echo "check_diskimage_mounted: invalid parameter $bool. expected true|false"
		;;
	esac
}

check_termux_enabled() {
	if ! [ "$(getprop persist.termux.enabled)" = "true" ]; then
		echo "$0: Termux not enabled. Exiting"
		exit 1
	fi
}

check_storage() {
	rootdir=$(getprop persist.termux.rootdir)
	if [ -z "$rootdir" ]; then
		echo "$0: persist.termux.rootdir not set. Exiting."
		exit 1
	fi
	diskimage=$(getprop persist.termux.diskimage)
}

resize_diskimage() {
	if [ -z "$diskimage" ]; then
		echo "$0: Termux disk image not enabled. Cannot resize. Exiting."
		exit 1
	fi
	check_diskimage_mounted false
	size=$(getprop persist.termux.diskimage.size)
	if [ -z "$size" ]; then
		echo "$0: persist.termux.diskimage.size not set. Exiting."
		exit 1
	fi
	echo "$0: Checking filesystem integrity..."
	e2fsck -y -f "$diskimage"
	echo "$0: Resizing disk image to $size..."
	truncate -s "$size" "$diskimage"; die "$?"
	resize2fs "$diskimage"; die "$?"
	echo "$0: Checking filesystem integrity post-resize..."
	e2fsck -y -f "$diskimage"
	echo "$0: Resize successful."
}

main_delete() {
	check_termux_mounted false
	check_diskimage_mounted false
	echo "$0: Deleting termux image..."
	[ -n "$diskimage" ] && rm -f "$diskimage" || rm -rf "$rootdir"
	echo "$0: Successful. Bye-bye Termux!"
	setprop persist.termux.enabled false
}

[ $# -ne 0 ] || { usage; exit 1; }

while [ $# -gt 0 ]; do
	case "$1" in
	bootstrap)
		check_storage
		main_bootstrap
		;;
	diskimage-mount)
		check_storage
		diskimage_mount
		;;
	diskimage-unmount)
		check_storage
		diskimage_unmount
		;;
	mount)
		check_termux_enabled
		check_storage
		initramfs_mount
		;;
	unmount)
		check_termux_enabled
		check_storage
		initramfs_unmount
		;;
	resize)
		check_termux_enabled
		check_storage
		resize_diskimage
		;;
	delete)
		check_termux_enabled
		check_storage
		main_delete
		;;
	*)
		usage
		exit 1
	esac
	shift
done
